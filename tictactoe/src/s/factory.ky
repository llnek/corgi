;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Array of winning combinations.
(defn mapGoalSpace  "" [size]
  (with-local-vars [rows [] cols [] dx [] dy []])
  (dotimes [r size]
    (with-local-vars [h [] v []])
    (dotimes [c size]
      (conj! h (+ c (* r size)))
      (conj! v (+ r (* c size))))
    (conj! rows h)
    (conj! cols v)
    (conj! dx (+ r (* r size)))
    (conj! dy (+ r (* size (- size r 1)))))
  (concat [dx dy] rows cols))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn reifyBoard "" [ecs layer options]
  (locals goals (mapGoalSpace options.size)
          bd (GameBoard options.size csts.CV_Z csts.CV_X csts.CV_O goals))
  (createEntity ecs
                [Grid options.size options.seed]
                [Board options.size goals]
                [UISelection]
                [SmartAlgo bd]
                [NetPlay]
                [GridView options.size layer]))

