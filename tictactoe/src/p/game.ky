
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- BackLayer "" [scene zOrder]
  (with-local-vars [y (xlayer)
                    g (sprite "game.bg")])
  (pos! g (ccsx/center))
  (child+ y g)
  (child+ scene y zOrder :BackLayer))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- GameLayer "" [scene zOrder]
  (with-local-vars [y (xlayer)
                    bus nil])
  (ccsx/onTouchOne bus)
  (ccsx/onMouse bus)
  (y.attr
    `{:ebus bus
      :replay #(if @@wsock
                  (.send @@wsock `{:type (.-MSG_SESSION *Events*)
                                   :code (.-REPLAY *Events*) })
                  (.play this false))
      :play (fn [new?]
              ;;sort out names of players
              (each-property
                (fn [v k]
                  (if (= 1 (_1 v))
                    (set! p1ids [k (_2 v)])
                    (set! p2ids [k (_2 v)])))
                @@ppids)
              (.reset this new?)
              (.initPlayers this)
              (.initEngine this )
              (-> (.getChildByName scene :HUD)
                  (.regoPlayers csts.P1_COLOR p1ids
                                csts.P2_COLOR p2ids))
              (oset! this :running #t :msgQ []))
      onNewGame (fn [mode]
                  (.setGameMode this mode)
                  (.play this #t))
      reset (fn [new?]
              (.regoAtlas this "game-pics")
              (.regoAtlas this "lang-pics")
              (oset! this :lastWinner ?)
              ((get (.getChildByName scene :HUD)
                    (if new? :resetAsNew :reset))))
      updateHUD (fn []
                  (vars [func arg]
                        (if @@running
                          [:drawStatus @@actor]
                          [:drawResult @@lastWinner]))
                  ((get (.getChildByName scene :HUD) func) arg))
      playTimeExpired #(conj! @@msgQ :forfeit)
      initPlayers (fn []
                    (vars [p1cat p2cat]
                          (case @@mode
                            3 [csts.NETP csts.NETP]
                            1 [csts.HUMAN csts.BOT]
                            2 [csts.HUMAN csts.HUMAN])
                          p1 (new cobjs/Player p1cat csts.CV_X 1 csts.P1_COLOR)
                          p2 (new cobjs/Player p2cat csts.CV_O 2 csts.P2_COLOR))
                    (oset! this
                           :players [nil p1 p2]
                           :colors `{})
                    (oset! this.colors
                           csts.P1_COLOR p1
                           csts.P2_COLOR p2))
      overAndDone #(.endGame (.getChildByName scene :HUD) %1) }))

(defn gameScene "" [options]
  (with-local-vars [scene (xscene)
                    b (xlayer)
                    g (xlayer)
                    h (xlayer)])
  (child+ scene b -1 :BG)
  (child+ scene g 0 :GAME)
  (child+ scene h 1 :HUD)
  (backLayer scene)
  (hudLayer scene)
  (gameLayer scene)
  (.onmsg scene "hud.showmenu" #(.showMenu h))
  (.onmsg scene "hud.replay" #(.replay g))
  (.onmsg scene "hud.timer.show" (.showTimer h))
  (.onmsg scene
          "net.restart"
          (fn [] (.killTimer h)(.play g #f)))
  (.onmsg scene "net.stop" #(.overAndDone g (.-status %)))
  (.onmsg scene "hud.timer.hide" #(.killTimer h))
  (.onmsg scene
          "hud.score.update"
          #(.updateScore h (.-color %) (.-score %)))
  (.onmsg scene "hud.end" #(.overAndDone g (.-winner %)))
  (.onmsg scene "hud.update" #(.update h (.-running %) (.-pnum %)))
  (.onmsg scene "player.timer.expired" #(.playTimeExpired g %))
  scene)


