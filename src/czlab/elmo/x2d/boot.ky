;; Copyright Â©  2013-2018, Kenneth Leung. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;; which can be found in the file epl-v10.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.

(ns ^{:doc ""
      :author "Kenneth Leung"}

  czlab.elmo.x2d.boot

  (:require ["kirby" :refer :all]
            ["./config" :as cfg]
            ["./ccsx" :as ccsx]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(const- *ss1* "StartScreen")
(def *xcfg* nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- handleMultiDevices* "" []
  (with-local-vars [fsz (ccsx/screenSize)
                    [dir n1 n2]
                    (cond (or (>= fsz.width 2048)
                              (>= fsz.height 2048))
                          [:hdr 2048 1536]
                          (or (>= fsz.width 1136)
                              (>= fsz.height 1136))
                          [:hds 1136 640]
                          (or (>= fsz.width 1024)
                              (>= fsz.height 1024))
                          [:hds 1024 768]
                          (or (>= fsz.width 960)
                              (>= fsz.height 960))
                          [:hds 960 640]
                          :else
                          [:sd 480 320])])
  ;;device window size or canvas size.
  (loggr/info "view.frameSize = [" fsz.width ", " fsz.height "]")
  (update-in! *xcfg* [:resolution :resDir] #(dir))
  (ccsx/setdr (get-in *xcfg* [:game :landscape?])
              n1 n2
              (get-in *xcfg* [:resolution :policy]))
  (do-with [searchPaths (.getSearchPaths jsb.fileUtils)]
           ;;need to prefix "assets" for andriod
           (each #(.push searchPaths %)
                 (concat (map #(str % dir)
                              ["assets/res/" "res/"]) ["assets/src" "src"]))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- handleMultiDevices
  "Sort out what resolution to use for this device. @return search paths"
  []
  (with-local-vars [fh (.-handleDevices *xcfg*)])
  ;;if handler provided, call it and go.
  (if (fn? fh) (fh) (handleMultiDevices* )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;let pvLoadSound = (sh, xcfg, k,v) => { return sh.sanitizeUrl( v + '.' + xcfg.game.sfx ); }
;let pvLoadSprite = (sh, xcfg, k, v) => { return sh.sanitizeUrl(v[0]); }
;let pvLoadImage = (sh, xcfg, k,v) => { return sh.sanitizeUrl(v); }
;let pvLoadTile = (sh, xcfg, k,v) => { return sh.sanitizeUrl(v); }
;let pvLoadAtlas = (sh, xcfg, k,v) => { return [sh.sanitizeUrl( v + '.plist'), sh.sanitizeUrl( v + '.png') ]; }
;let pvLoadLevels = (sjs, sh, xcfg) => {

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- pvGatherPreloads "" [] nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defcc MyLoaderScene cc.Scene `{
  init #(true)
  _startLoading #(with-local-vars [self this
                                   res @@resources]
                  (.unschedule self self._startLoading)
                  (.load cc/loader
                         res
                         (fn [result count loadedCount] nil)
                         #(if (fn? self.cb) (.cb self))))
  initWithResources (fn [resources cb]
                      (set! @@resources (or resources []) @@cb cb))
  onEnter (fn []
            (.call cc.Node.prototype.onEnter this)
            (.schedule this this._startLoading 0.3))
  onExit #(.call cc.Node.prototype.onExit this) })

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- preLaunchApp [ldr]
  (with-local-vars [fz (ccsx/screenSize)
                    sz ? pfx "" rs ? pcy ?])
  (if-some [paths (if cc/sys.isNative (handleMultiDevices))]
    (.setSearchPaths jsb.fileUtils paths)
    (do (set! sz (get-in *xcfg* [:game
                                 (get-in *xcfg* [:resolution :resDir])])
              pcy (get-in *xcfg* [:resolution :web]))
        (setDesignResolutionSize cc/view sz.width sz.height pcy)))
  (set! rs (.getDesignResolutionSize cc/view))
  (.handleResolution *xcfg* rs)
  (loggr/info "DesignResolution, = ["
              rs.width ", "
              rs.height "]"
              ", scale = " (get-in *xcfg* [:game :scale]))
  (.setProjection cc/director cc/Director.PROJECTION_2D)
  (when-not cc/sys.isNative
    (.resizeWithBrowserSize cc/view #t)
    (.adjustViewPort cc/view #t)
    (set! pfx "/public/elmo/res/"))
  ;;(.setAnimationInterval cc/director (/ 1 (get-in *xcfg* [:game :frameRate])))
  (if (get-in *xcfg* [:game :debug?])
    (.setDisplayStats cc/director (get-in *xcfg* [:game :showFPS])))
  (set! rs [(str pfx "cocos2d/pics/preloader_bar.png")
            (str pfx "cocos2d/pics/ZotohLab.png")])
  ;;hack to suppress the showing of cocos2d's logo
  (oset! cc "loaderScene" (new MyLoaderScene))
  (.init cc/loaderScene)
  (.initWithResources cc/loaderScene
                      rs
                      #(.preload ldr
                                 (pvGatherPreloads)
                                 (fn []
                                   (.runOnce *xcfg*)
                                   (.runScene cc/director (.startScene *xcfg*)))))
  (.runScene cc/director cc.loaderScene))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- bootFunc "" []
  (loggr/info "About to create Cocos2D HTML5 Game")
  (preLaunchApp loader)
  (l10nInit)
  (sfxInit)
  (loggr/info "Loaded and running. OK"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(oset! cc.game :onStart bootFunc)
(.run cc/game)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF

