;; Copyright Â©  2013-2018, Kenneth Leung. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;; which can be found in the file epl-v10.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.

(ns ^{:doc ""
      :author "Kenneth Leung"}
  czlab.elmo.x2d.negamax
  (:require ["kirby" :refer :all]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(const- PINF 1000000)
(defn- negamax
  "" [board game maxDepth depth alpha beta]
  (if (or (zero? depth)
          (.isOver? board game))
    (.evalScore board game)
    (negamax* board game maxDepth depth alpha beta)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- negamax*
  "" [board game maxDepth depth alpha beta]
  (with-local-vars [openMoves (.getNextMoves board game)
                    bestValue -PINF
                    rc ? move ?
                    bestMove (_1 openMoves)])
  (if (= depth maxDepth)
    (oset! game :lastBestMove  bestMove))
  (floop [move openMoves]
    (.makeMove board game move)
    (.switchPlayer board game)
    (set! rc (- (negamax board
                         game
                         maxDepth (-1 depth) -beta -alpha)))
    (.switchPlayer board game)
    (.unmakeMove board game move)
    (set! bestValue (Math/max bestValue  rc))
    (when (< alpha rc)
      (set! alpha rc bestMove move)
      (if (= depth maxDepth)
        (oset! game :lastBestMove move))
      (if (>= alpha beta) (break-out-of-loop!))))
  ;;return the best value
  bestValue)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defcc GameBoard cc/Class
  `{isOver (fn [game] #f)
    evalScore (fn [game] 0)
    getNextMoves (fn [game] [])
    makeMove (fn [game move] )
    switchPlayer (fn [game] )
    unmakeMove (fn [game move] )
    takeSnapshot #(nil) })

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn evalNegaMax "" [board]
  (with-local-vars [s (.takeSnapshot board)])
  (negamax board s 10 10 -PINF PINF) (.-lastBestMove s))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn createSnapshot "" []
  (atom `{:lastBestMove nil :other nil :cur nil :state nil}))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF


