;; Copyright Â©  2013-2018, Kenneth Leung. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;; which can be found in the file epl-v10.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.

(ns ^{:doc ""
      :author "Kenneth Leung"}
  czlab.elmo.x2d.config)

(def *xcfg* `{
  :urlPrefix "/public/elmo/"
  :appid ""
  :color ""
  :resolution `{ :web cc/ResolutionPolicy.SHOW_ALL :resDir :sd }
  :levels `{}
  :assets `{
    :fonts ["TinyBoxBlackBitA8" "OogieBoogie" "JellyBelly" "AgentOrange" "Hiruko" "OCR"]
    :images `{}
    :sounds `{ :start  "PowerUp" } }

  :borderTiles "cbox-borders_x8.png"
  :lang (or cc/sys.language "en")
  :wsUri "/network/odin/websocket"
  :preloadLevels #t
  :start nil
  :sfx :mp3
  :scale 1
  :landscape? #false
  :gravity 0
  :version ""
  :trackingID ""

  :smac nil

  :l10nTable `{
    :en `{
      "%mobileStart" "Press Anywhere To Start!"
      "%webStart" "Press Spacebar To Start!"
      "%passwd" "Password"
      "%userid" "UserId"
      "%player2" "Player 2"
      "%player1" "Player 1"
      "%computer" "Computer"
      "%cpu" "CPU"
      "%2players" "2 Players"
      "%1player" "1 Player"
      "%online" "Online"
      "%gameover" "Game Over"
      "%quit!" "Quit"
      "%back" "Back"
      "%ok" "OK"
      "%mmenu" "Main Menu"
      "%replay" "REPLAY"
      "%play" "PLAY"
      "%waitothers" "Waiting...\nfor other players."
      "%waitother" "Waiting...\nfor another player."
      "%signinplay" "Please sign in to play."
      "%quit?" "Continue and quit game?" }}

  :csts `{
    :CV_O (.charCodeAt "O" 0)
    :CV_X (.charCodeAt "X" 0)

    :P2_COLOR "O"
    :P1_COLOR "X"

    :NETP   3
    :HUMAN  1
    :BOT    2

    :GAME_MODE 1
    :TILE 8
    :S_OFF 4
    :GAME_ID  "" }

  :sound `{
    :volume 0.5
    :open? #f
    :music `{
      :volume 0.5
      :track nil
    }
  }

  :handleResolution (fn (rs) nil)

  :runOnce #(nil)

})

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF

Here you go:

//Add the Chipmunk Physics space
var space = new cp.Space();
space.gravity = cp.v(0, -10);

//Optionally add the debug layer that shows the shapes in the space moving:
/*var debugNode = new cc.PhysicsDebugNode(space);
debugNode.visible = true;
this.addChild(debugNode);*/

//add a floor:
var floor = new cp.SegmentShape(this.space.staticBody, cp.v(-1000, 10), cp.v(1000, 0), 10);
//floor.setElasticity(1);
//floor.setFriction(0);
space.addStaticShape(floor);

//add a square to bounce
//the Sprite
var mySprite = cc.PhysicsSprite.create("res/something.png");
gameLayer.addChild(mySprite);

//the Body
var size = mySprite.getContentSize();
var innertialMomentum = 1; //Use Infinity if you want to avoid the body from rotating
var myBody = new cp.Body(innertialMomentum , cp.momentForBox(innertialMomentum , size.width, size.height));
mySprite.setBody(myBody);
space.addBody(myBody);
//myBody.p = cc.p(xxx, yyy); //To alter the position of the sprite you have to manipulate the body directly, otherwise it won't have the desired effect. You can also access it by mySprite.body

//the Shape
var myShape = new cp.BoxShape(myBody, size.width, size.height);
//myShape.setElasticity(1);
//myShape.setFriction(0);
space.addShape(myShape);

//Apply your desired impulse
//mySprite.body.applyImpulse(cp.v(ix,iy), cp.v(rx,ry)); // Where the first vector is for the impulse strength and direction and the second is for the offset between the center of the object and where you want the impulse to be applied.
